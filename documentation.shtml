<!--#include file="includes/doctype.shtml" -->

<head>
    <title>About Advanced Algos Ltd.</title>
    <meta name="description" content="The role of the startup in the Advanced Algos Project">
    <meta charset="utf-8">

    <!--#include file="includes/headlinks.shtml" -->

</head>
<body>

    <!--#include file="includes/header.shtml" -->


    <section class="light_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <div class="sc_tabs sc_tabs_style_1 inited">
                        <ul class="nav nav-tabs sc_tabs_titles" role="tablist" id="tabs_sliders">
                            <li class="tab_names active"><a class="theme_button" href="#tab1" role="tab" data-toggle="tab">INTRO</a></li>
                            <li class="tab_names"><a class="theme_button" href="#tab2" role="tab" data-toggle="tab">AAPLATFORM</a></li>
                            <li class="tab_names"><a class="theme_button" href="#tab3" role="tab" data-toggle="tab">ALGOBOTS</a></li>
                            <li class="tab_names"><a class="theme_button" href="#tab4" role="tab" data-toggle="tab">T-BOTS</a></li>
                            <li class="tab_names"><a class="theme_button" href="#tab6" role="tab" data-toggle="tab">TEST</a></li>
                        </ul>
                        <!-- Tab panes -->
                        <div class="tab-content">
                            <div class="tab-pane fade in active" id="tab1">

                                <div class="row">
                                    <div class="col-sm-10 margin_top_small">

                                        <h2>Welcome to the Algobots Competition Platform!</h2>

                                        <p>
                                            Join us for a dive into the world of algorithmic cryptocurrency trading to collaborate and compete with a community of developers and traders joining forces to enable the rapid-evolution of open-source cryptocurrency algobots.
                                            
                                            In this series of pages you will find all the information you need to:
                                            
                                            <ul>
                                                <li>
                                        <p>
                                            understand why we are joining forces and what our collective mission is,
                                            
                                            </li>
                                        </p>
                                        <li>
                                            <p>
                                                get acquainted with the Advanced Algos infrastructure that facilitates the creation of trading bots,
                                                
                                        </li>
                                        <li>
                                            <p>
                                                get you started in creating your own algobots, and
                                                
                                        </li>
                                        <li>
                                            <p>
                                                participate in our algorithmic trading competitions with prizes in metallic to be distributed among all participants.
                                                
                                        </li>
                                        </ul>
                                        <p>
                                            Let's get things rolling!
                                        </p>

                                        <h2>Basic Definitions</h2>
                                        <h3>Infrastructure</h3>

                                        <p>
                                            <ul>
                                                <li>
                                        <p>
                                            <strong>Algobots</strong>: Open-source algorithms destined to become autonomous agents with an autonomous financial life once the AAPlatform along with the Algobots Ecosystem are launched.
                                            </li>
                                            <li>
                                        <p>
                                            <strong>AAPlatform</strong>: AKA <i>the platform</i>, it is the IT system on top of which everything runs.
                                            </li>
                                            <li>
                                        <p>
                                            <strong>AACloud</strong>: The part of the system that runs algobots in the cloud.
                                            </li>
                                            <li>
                                        <p>
                                            <strong>AAWeb</strong>: The part of the system that shows algobots' activities in a visual environment.
                                            </li>
                                            <li>
                                        <p>
                                            <strong>Algobots Arena</strong>: The scenario in which competitions take place.
                                            </li>
                                            </ul>
                                        </p>
                                        <h3>
                                            Stakeholders
                                        </h3>
                                        <p>
                                            <ul>
                                                <li>
                                        <p>
                                            <strong>Advanced Algos Ltd.</strong>: The start up behind the creation of the AAPlatform and the people running this show until the Algobots Community takes over.
                                            </li>
                                            <li>
                                        <p>
                                            <strong>Algobots Community</strong>: The emerging community of developers and traders that share our vision and help push it forwards by creating algobots.
                                            </li>
                                            <li>
                                        <p>
                                            <strong>Algobot Team</strong>: That would be you, along with anyone else that wishes to help you out in this quest. Algobot Teams are subsets of the major Algobots Community.
                                            </li>
                                            </ul>
                                        </p>
                                        <h3>
                                            Ecosystem
                                        </h3>
                                        <p>
                                            <ul>
                                                <li>
                                        <p>
                                            <strong><span class="red_text">ALGO</span> Ecosystem</strong>: Its the body of economic relationships established by stakeholders in the network by which each actor consumes services from other actors using ALGO as the medium of exchange.
                                            </li>
                                            <li>
                                        <p>
                                            <span class="red_text">ALGO</span>: Its the platform's native token designed as the medium of payment to access and use the network.
                                            </li>
                                            </ul>
                                        </p>
                                        <h2>
                                            Still Wondering What We Are Doing Here?
                                        </h2>
                                        <p>

                                            In a nut shell, we are bootstrapping a community that collaborates to create the most advanced, accessible and easy-to-use crypto trading algorithms. We compete to push ourselves and adopt open-source development practices and permissionless innovation principles to collaborate and drive the rapid-evolution of algobots.
                                            
                                            Advanced Algos Ltd focuses on refining the infrastructure and developing the platform that will eventually allow end-users to hire our collective trading intelligence by subscribing to our trading algobots. The Community develops the actual algobots, has fun and win prizes competing with each other, and collects the profits resulting from each other's real-life crypto trading with our own t-bots.
                                            
                                            Together, we are creating a new business in the new sharing economy. A business with fairness and transparency as core values, in which all parties benefit. And –at the same time– a business with a profound social mission: to bring the opportunity of economic progress to all people.
                                        </p>

                                        <h2>Relevant GitHub Organizations</h2>
                                        <p>

                                            There are three GitHub Organizations you need to be familiar with:
                                            </p>
                                            <ul>
                                                <li>
                                        <p>
                                            <a href="https://github.com/AdvancedAlgos"><strong>AdvancedAlgos</strong></a>: Features repositories with the AAPlatform code including the bits that run in the cloud (AACloud) and in the web browser, along with a few other platform-related configurations and documentation.
                                           </p> </li>
                                            <li>
                                                <p>
                                                    <a href="https://github.com/AAMasters"><strong>AAMasters</strong></a>: Its a showcase GitHub organization similar to the one each Algobot Team needs to create for themselves. It features several examples of bots, each in their corresponding repository.
                                                </p>
                                            </li>
                                            <li>
                                                <p>
                                                    <a href="https://github.com/AAArena"><strong>AAArena</strong></a>: Its another showcase GitHub organization featuring the AA Application hosting the trading algobot competition you are about to enter.
                                                </p></li>
                                            </ul>
                                    </div>
                                </div>
                            </div>


                            <div class="tab-pane fade" id="tab2">
                                <div class="row">
                                    <div class="col-sm-10 margin_top_small">

                                        <h2>The AAPlatform</h2>

                                        <h3>Leading Principles</h3>
                                        <p>
                                            We live in a world crammed with bots working behind the scenes whose intellectual property and profits are held close by their companies and developers. Advanced Algos and the surrounding community envision a <i>World of Tomorrow</i> brimming with the greater wealth cultivated by permissionless knowledge and accessible resources. Thus, it is our mission to create a self-sustaining open-source algobot development and access platform –making algobots accessible and easy-to-use for the everyday person.
                                        </p>

                                        <h3>AACloud</h3>
                                        <p>
                                            AACloud is the part of the platform that interacts with algobots and puts them to run in the cloud.
                                        </p>
                                        <h4>Run.js</h4>
                                        <p>
                                            This is where everything starts:
                                        </p>
                                        <ul>
                                            <li>
                                                <p>
                                                    Run.js makes a number of global definitions (global variables,  constants and parameters),
                                                </p>
                                            </li>
                                            <li>
                                                <p>
                                                    loads all relevant configuration files (starting from AACloud's <i>this.config.json</i> where each algobot process to be run is listed),
                                                </p>
                                            </li>
                                            <li>
                                                <p>
                                                    and eventually calls the <i>Main Loop</i> module corresponding to the type of algobot it is running.
                                                </p>
                                            </li>
                                        </ul>
                                        <h4>Main Loop Modules</h4>
                                        <p>
                                            The platform's architecture is designed so that algobots are run as self-contained entities, that is, when algobots finish their execution they are unloaded from memory and put to rest until the following scheduled execution starts.
                                        </p>
                                        <p>
                                            Each type of algobot (extractor, indicator and trading) has a specific workflow, thus each of them are handled from separate Main Loop modules. However, all Main Loop modules share a similar structure:
                                        </p>
                                        <ul>
                                            <li>
                                                <p>
                                                    They first set up a structure of nested objects to be passed on to algobots;
                                                </p>
                                            </li>
                                            <li>
                                                <p>
                                                    objects are initialized, exposing a number of public functions that algobots can consume to perform their business operations;
                                                </p>
                                            </li>
                                            <li>
                                                <p>
                                                    the corresponding algobots processes are executed and objects are passed on;
                                                </p>
                                            </li>
                                            <li>
                                                <p>
                                                    once algobots finish their run, the Main Loop stores the <i>Context</i>
                                                </p>
                                            </li>
                                            <li>
                                                <p>
                                                    and finally, sets the time for the next execution.
                                                </p>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            </div>


                            <div class="tab-pane fade" id="tab3">
                                <div class="row">
                                    <div class="col-sm-10 margin_top_small">

                                        <h2>About Algobots</h2>
                                        <p>
                                            Algobots are open source projects in Github, programed in JavaScript. AACloud calls algobots and puts them to run in specific time intervals. They consume services from the platform and data from other algobots, especially from indicator algobots, and at the same time, produce an output that is stored in the cloud (to be consumed by other algobots).
                                        </p>
                                        <h4>Types of Algobots</h4>

                                        The AAPlatform handles three different types of bots, differentiating them by their incumbencies:
                                        </p>

                                        <h5>Extractor Algobots (AKA e-bots)</h5>
                                        <p>
                                            They extract raw trades and order books data from exchanges and store it in a standardized format for other bots to consume.
                                        </p>
                                        <p>
                                            You will not need to program these kinds of bots for this competition, as we will be using an existing one –<a href="https://github.com/AAMasters/AACharly-Extraction-Bot">Charly</a>– who gets raw data from Poloniex, the one exchange we will be working with.
                                        </p>
                                        <h5>Indicator Algobots (AKA i-bots)</h5>
                                        <p>
                                            They process raw trades data and other indicators to output elaborate data structures, mainly technical indicators, for trading algobots to consume.
                                        </p>
                                        <p>
                                            You will most likely need to program i-bots in order to perform Technical Analysis studies or functions. While it is true that you can process data and do all sorts of calculations from within your trading algobot's code, this is not recommended. Advanced Algos Ltd. encourages developers to respect incumbencies assigned to each type of algobot, for several reasons:
                                        </p>
                                        <ul>
                                            <li>
                                                <p>
                                                    The AAPlatform's architecture is designed so that algobots can consume data from other algobots, in order for the network to reuse resources. By respecting the incumbencies of each type of algobot you contribute to growing the platform along with the embedded ecosystem in a sustainable manner.
                                                </p>
                                            </li>
                                            <li>
                                                <p>
                                                    The AAPlatform is set up as a marketplace of extractor, indicator and trading algobots. If you program and release an i-bot, you will soon be able to monetize that effort as algobots consuming the data your i-bot generates will pay you a fee.
                                                </p>
                                            </li>
                                            <li>
                                                <p>
                                                    If instead of creating an indicator algobot, you do the technical analysis from within your trading algobot, anyone can come at a later time, extract from your trading algobot the code that performs the technical analysis, and create their own indicator algobot with it. This means you may permanently lose the chance to monetize the indicator functions and effectively allow someone else to do it instead.
                                                </p>
                                            </li>
                                        </ul>
                                        <h5>Trading Algobots (AKA t-bots)</h5>
                                        <p>
                                            They automate trading strategies and place orders through the platform, which connects to exchanges via exchanges APIs to trade cryptocurrency.
                                        </p>
                                        <h4>How Algobots Work</h4>
                                        <p>
                                            Algobots mission is –in essence– creating <strong>products</strong> that others can consume. To do this, they run <strong>processes</strong> which produce and store <strong>datasets</strong>.
                                        </p>
                                        <p>
                                            Eeach algobot may have several processes, and processes don't necessarily have a one-to-one relationship with products. That is, a product can be the result of the work of one or more processes.
                                        </p>
                                        <p>
                                            Algobot processes are self-contained entities, meaning that they run when called by the AACloud and stop when they finish the task at hand, to wake up again only when AACloud calls the process the next time (in configurable intervals). The datasets processes create are the actual <strong>output</strong> of algobots which are stored in Azure cloud storage containers. But processes also produce and store a second valuable piece of information: <strong>status reports</strong>.
                                        </p>
                                        <p>
                                            Status reports serve as temporal annotations that algobots read every time they are called by AACloud so as to know what was done in the previous run and what the state of affairs is at the present time. Status reports are dynamic, and they change constantly, with updates after every single run of the associated process.
                                        </p>
                                        <p>
                                            We established that algobots produce products for others to consume. This "others" include other algobots, meaning that algobots usually depend on the datasets produced by other algobots. We call these <strong>data dependencies</strong> which are declared on each algobot configuration file.
                                        </p>
                                        <p>
                                            Algobots consume their own status report and they might as well consume status reports from other algobots. We call these <strong>status dependencies</strong>  which are too declared in each algobot configuration file.
                                        </p>
                                        <p>
                                            At this point in time, there are five different types of datasets: market files, daily files, minutes files, single file and file sequence. These types of datasets define the structure of the data and how it is stored.
                                        </p>
                                        <p>
                                            A <strong>market file</strong> contains data spanning the whole existence of the market, that is, from the day the pair (e.g. USDT-BTC) started trading up to the present time. The data is stored in one single file, which is appended every time the process runs generating new data.
                                        </p>
                                        <p>
                                            A <strong>daily file</strong> contains data segmented by day. That is, the process generates one file per day and stores it in the deepest level of a folder tree structure of the following type:  Year > Month > Day.
                                        </p>
                                        <p>
                                            A <strong>minutes file</strong> contains data pertaining to one single minute and is stored in the deepest level of a folder tree structure of the following type:  Year > Month > Day > Hour > Minute.
                                        </p>
                                        <p>
                                            A <strong>file sequence</strong> consists of sequential information that is not necessarily structured on any particular timeframe. The process stores two types of files: the one ending in <i>.Sequence.json</i> contains the number of files in the sequence, and the sequence is formed by multiple files ending in a sequential number (e.g. 15.json).
                                        </p>
                                        <p>
                                            A <strong>single file</strong> is pretty much just that: a dataset that is stored in one file only.
                                        </p>

                                        <h4>Real Life Example</h4>

                                        <p>
                                            Let's put all this in perspective by analyzing the processes, products and dependencies of a few existing algobots.
                                        </p>
                                        <p>
                                            <a href="https://github.com/AAMasters/AACharly-Extraction-Bot">Charly</a> is an extractor algobot. As his <a href="https://github.com/AAMasters/AACharly-Extraction-Bot/blob/master/README.md">README file</a> explains, he "gets trades data for all markets –both historic and live– assuring consistency using recursive processes, and store it in a highly fragmented and usable dataset".
                                        </p>
                                        <p>
                                            Also explained in Charly's README file, Charly offers one product which is defined by the dataset scope and various characteristics. Please, go on and review <a href="https://github.com/AAMasters/AACharly-Extraction-Bot/blob/master/README.md">Charly's README file</a> and become familiarized with the concepts detailed in there.
                                        </p>
                                        <p>
                                            Charly has three different processes: Poloniex-Live-Trades, Poloniex-Historic-Trades and Poloniex-Hole-Fixing. These three process combined generate the one single dataset that constitutes Charly's single product. The dataset is stored under the <strong>minutes file</strong> structure.
                                        </p>
                                        <p>
                                            Now, let's see what <a href="https://github.com/AAMasters/AABruce-Indicator-Bot">Bruce</a>, an indicator algobot, does with Charly's product. As you can learn from <a href="https://github.com/AAMasters/AABruce-Indicator-Bot/blob/master/README.md">Bruce's README file</a> he produces two datasets: candles at 1 minute resolution and volumes at 1 minute resolution. The datasets are stored under the <i>daily file</i> type of dataset.
                                        </p>
                                        <p>
                                            Now scroll down the README file and see what Bruce's dependencies are. That's right. Bruce depends on Charly's product. Bruce's processes take the trades data that Charly extracted from the exchange, performs calculations to build 1 minute candles and stores his own dataset with more elaborate data. In other words, Bruce is adding value to Charly's product and offering a new value-added product of his own.
                                        </p>
                                        <p>
                                            But the value-adding chain does not stop there. Let's take a look at another i-bot, <a href="https://github.com/AAMasters/AAOlivia-Indicator-Bot">Olivia</a>. According to her <a href="https://github.com/AAMasters/AAOlivia-Indicator-Bot/blob/master/README.md">README file</a> Olivia offers four different products: candles at sub-hour resolutions, candles in resolutions above one hour, volumes in sub-hour resolutions and volumes in resolutions above one hour. And guess what? Indeed, Olivia uses Bruce's one minute candles and one minute volumes to produce complementary candles and volumes at different resolutions.
                                        </p>
                                        <p>
                                            And so it goes. The last link in the chain usually comes in the form of trading algobots using data from indicator algobots, as that is the ultimate purpose of the whole algobots ecosystem: to provide trading algobots with quality preprocessed data they can use to make the best possible trading decisions.
                                        </p>
                                        <p>
                                            Let's take a look at <a href="https://github.com/AAMasters/AAArtudito-Trading-Bot">Artudito</a>, for instance. Artudito –a t-bot– uses candles and volumes from Olivia to make trading decisions. Of course, the main goal of a t-bot like Artudito is to perform profitable trading. However, notice that trading algobots too have outputs, and thus offer products that are consumable by others. Trading bots output three different products: Live Trading History, Backtest Trading History and Competition Trading History. Those datasets are available for others to consume. For instance, the <a href="https://aawebproduction.azurewebsites.net">AAWeb application</a> uses those datasets to show t-bots activities on a visual environment resembling typical candlestick charts so that anyone can dive in and analyze what algobots are doing.
                                        </p>

                                        <h3>About Plotters</h3>

                                        <p>
                                            Plotters are –too– JavaScript programs created by Algobot Teams. They serve the purpose of creating a visual representation of datasets so that people can easily interpret the data. For instance, <a href="https://github.com/AAMasters/Plotters-Candles-Volumes">Plotters-Candles-Volumes</a> creates the visual representation of candlesticks and volume graphs.
                                        </p>
                                        <p>
                                            Algobots are usually associated to plotters in order for the AAWeb app to be able to plot the corresponding datasets. For instance, trading algobots use <a href="https://github.com/AAMasters/Plotters-Trading">Plotters-Trading</a>.
                                        </p>

                                    </div>
                                </div>
                            </div>



                            <div class="tab-pane fade" id="tab4">
                                <div class="row">
                                    <div class="col-sm-10 margin_top_small">

                                        <h2>Trading Algobots</h2>

                                        <p>
                                            You are almost done with your set up. Let's briefely discuss t-bots before actually cloning one to use as a template.
                                        </p>

                                        <h3>Overview</h3>

                                        <p>
                                            At this early stage, the AAPlatform and the trading algobot templates solve several of the main issues around algorithmic trading:
                                        </p>
                                        <ul>
                                            <li>
                                                <p>
                                                    Infrastructure to run bots in the cloud;
                                                </p>
                                            </li>
                                            <li>
                                                <p>
                                                    Crucial historical and live trades data;
                                                </p>
                                            </li>
                                            <li>
                                                <p>
                                                    Connection with exchanges, placement and handling of orders.
                                                </p>
                                            </li>
                                        </ul>
                                        <p>
                                            This leaves Algobot Teams free to focus in the creative side of things: coming up with and implementing a trading strategy.
                                        </p>
                                        <p>
                                            There are four AACloud modules particularly significant to trading algobots:
                                        </p>
                                        <ul>
                                            <li>
                                                <p>
                                                    <strong>Data Dependencies</strong> & <strong>Status Dependencies</strong>: Your trading algobot's config file contains two declarations of dependencies: data and status dependencies. Dependencies exist because t-bots use other algobot's datasets, or require certain data to be on a certain state. The dependencies modules load declared dependencies and pass them on to the bot through the Assistant module.
                                                </p>
                                            </li>
                                            <li>
                                                <p>
                                                    <strong>Context</strong>: In terms of context, trading algobots require the latest status report, the history of what was done on previous runs and the execution context tracking balances, trades, positions and so on. Context is saved in files as outputs of trading algobots. The context module reads the last status report, gets the date of the last execution, fetches the corresponding context file and serves it to the Assistant module.
                                                </p>
                                            </li>
                                            <li>
                                                <p>
                                                    <strong>Assistant</strong>: The Assistant module processes information available from other modules and serves a digest version to the trading algobot. The Assistant module also acts as an interface with the exchange, as it offers methods for placing, closing and moving orders.
                                                </p>
                                            </li>
                                        </ul>
                                        <p>
                                            Let's review how AACloud interacts with trading algobots...
                                        </p>
                                        <h3>Trading Bot Process Main Loop.js</h3>

                                        <p>
                                            As explained elsewhere, Main Loop modules have a common structure that can be summarized in the following actions:
                                        </p>
                                        <ul>
                                            <li>
                                                <p>
                                                    Set up objects
                                                </p>
                                            </li>
                                            <li>
                                                <p>
                                                    Initialize objects exposing public functions
                                                </p>
                                            </li>
                                            <li>
                                                <p>
                                                    Execute algobots processes
                                                </p>
                                            </li>
                                            <li>
                                                <p>
                                                    Save context
                                                </p>
                                            </li>
                                            <li>
                                                <p>
                                                    Schedule next execution
                                                </p>
                                            </li>
                                        </ul>
                                        <p>
                                            Let's take a closer look at how all this is done in the case of trading algobots...
                                        </p>

                                        <h4>Set Up & Initialize Objects</h4>

                                        <p>
                                            It all starts with <i>function loop()</i> defining the modules that will become available to the rest of the infrastructure and to algobots themselves:
                                        </p>
                                        <figure>
                                            <pre>
                                            <code class="language-javascript">
const UTILITIES = require(ROOT_DIR + 'Utilities');
const BLOB_STORAGE = require(ROOT_DIR + 'Blob Storage');
const DEBUG_MODULE = require(ROOT_DIR + 'Debug Log');
const POLONIEX_CLIENT_MODULE = require(ROOT_DIR + 'Poloniex API Client');
const EXCHANGE_API = require(ROOT_DIR + 'ExchangeAPI');
const CONTEXT = require(ROOT_DIR + 'Context');
const ASSISTANT = require(ROOT_DIR + 'Assistant');
const STATUS_REPORT = require(ROOT_DIR + 'Status Report');
const DATA_SET = require(ROOT_DIR + 'Data Set');
const STATUS_DEPENDENCIES = require(ROOT_DIR + 'Status Dependencies');
const DATA_DEPENDENCIES = require(ROOT_DIR + 'Data Dependencies');
                                        </code>
  </pre>
                                        </figure>
                                        <p>
                                            Each of these modules in AACloud work as an object. In each module a <i>new</i> function (e.g. <i>newContext</i> in the Context module) constructs <i>thisObject</i> –the main object of the module– defining properties and functions. These are the public functions which algobots can execute. Once the object is constructed and certain low-level operations are performed, <i>thisObject</i> is returned as a result of the <i>new</i> function.
                                        </p>
                                        <p>
                                            The way in which the Trading Bot Process Main Loop sets up and initializes the nested objects structure is by calling each module, one after the other, passing on objects while initializing them, which are nested as each of the modules construct their own objects returning them to the Main Loop.
                                            This is how it actually works:
                                        </p>
                                        <p>
                                            Status Dependencies are initialized first...
                                        </p>
                                        <figure>
                                            <pre>
                                            <code class="language-javascript">
function initializeStatusDependencies() {
if (FULL_LOG === true) { logger.write("[INFO] run -> loop -> initializeStatusDependencies ->  Entering function."); }
statusDependencies = STATUS_DEPENDENCIES.newStatusDependencies(bot, DEBUG_MODULE, STATUS_REPORT, BLOB_STORAGE, UTILITIES);
statusDependencies.initialize(processConfig.statusDependencies, undefined, undefined, onInizialized);
                                        </code>
  </pre>
                                        </figure>
                                        <p>
                                            Then it's the turn of Data Dependencies...
                                        </p>
                                        <figure>
                                            <pre>
                                            <code class="language-javascript">
function initializeDataDependencies() {
if (FULL_LOG === true) { logger.write("[INFO] run -> loop -> initializeDataDependencies ->  Entering function."); }
dataDependencies = DATA_DEPENDENCIES.newDataDependencies(bot, DEBUG_MODULE, DATA_SET, BLOB_STORAGE, UTILITIES);
dataDependencies.initialize(processConfig.dataDependencies, onInizialized);
                                        </code>
  </pre>
                                        </figure>
                                        <p>
                                            Now Context is initialized with a reference to Status Dependencies...
                                        </p>
                                        <figure>
                                            <pre>
                                            <code class="language-javascript">
function initializeContext() {
if (FULL_LOG === true) { logger.write("[INFO] run -> loop -> initializeContext ->  Entering function."); }
context = CONTEXT.newContext(bot, DEBUG_MODULE, BLOB_STORAGE, UTILITIES, STATUS_REPORT);
context.initialize(statusDependencies, onInizialized);
                                        </code>
  </pre>
                                        </figure>

                                        <p>
                                            Exchange API follows...
                                        </p>
                                        <figure>
                                            <pre>
                                            <code class="language-javascript">
function initializeExchangeAPI() {
if (FULL_LOG === true) { logger.write("[INFO] run -> loop -> initializeExchangeAPI ->  Entering function."); }
exchangeAPI = EXCHANGE_API.newExchangeAPI(bot, DEBUG_MODULE, POLONIEX_CLIENT_MODULE);
exchangeAPI.initialize(onInizialized);
                                        </code>
  </pre>
                                        </figure>
                                        <p>
                                            Finally, Assitant is initialized with references to Context, Exchange API and Data Dependencies...
                                        </p>
                                        <figure>
                                            <pre>
                                            <code class="language-javascript">
function initializeAssistant() {
if (FULL_LOG === true) { logger.write("[INFO] run -> loop -> initializeAssistant ->  Entering function."); }
assistant = ASSISTANT.newAssistant(bot, DEBUG_MODULE, UTILITIES);
assistant.initialize(context, exchangeAPI, dataDependencies, onInizialized);
                                        </code>
  </pre>
                                        </figure>
                                        <p>
                                            Thus, the whole object structure ends up in the <i>Assitant</i> object, with the following arrangement:
                                        </p>
                                        <figure>
                                            <pre>
                                            <code class="language-markup">
Assitant
├── Context
│	  └── Status Dependencies
├── Exchange API
└── Data Dependencies
                                        </code>
  </pre>
                                        </figure>
                                        <h4>Execute Algobots Processes</h4>

                                        <p>
                                            Once the object structure is constructed function <i>initializeUserBot()</i> passes the Assistant object to the <i>UserBot.js</i> module in the t-bot and function <i>startUserBot()</i> executes it. <strong>This makes the Assistant object the one and only direct interface of AACloud with t-bots.</strong>
                                        </p>

                                        <h4>Save Context & Schedule Next Execution</h4>

                                        <p>
                                            Once the t-bot finishes its execution, function <i>saveContext()</i> saves the context and function <i>loopControl(nextWaitTime)</i> sets the wait time for the next execution according to configuration values.
                                        </p>

                                        <h3>How T-Bots Use the Assistant Object</h3>
                                        https://aacorporatesitedevelop.azurewebsites.net/index.shtml
                                        The overall strategy when working with trading algobots can be summarized in the following bullet points:
                                        </p>
                                        <ul>
                                            <li>
                                                <p>
                                                    Bots are executed every one minute.
                                                </p>
                                            </li>
                                            <li>
                                                <p>
                                                    Each time the bot runs, it first needs to understand the context of the current execution. T-Bots get the context info from the Assitant object. The Assistant keeps track of orders placed at the exchange, keeps track of balances, profit and every other variable related to the operations that the t-bot may have performed in previous runs. All of that information is available for the t-bot to consume every time it is executed. Bear in mind that each time the t-bot places or moves an order, it doesn't wait for any sort of confirmation of the result of the opreation. That means that when it runs the next time it needs to syncronize with the current state of affairs in the exchange, as the order may have filled or not, may have filled partially or may have failed for some unexpected reason.
                                                </p>
                                            </li>
                                            <li>
                                                <p>
                                                    After evaluating the context and syncronizing with the exchange, the t-bot embarks in the calculations required by its trading strategy. At this point in time, there are very few indicators offering processed information. As [explained earlier](../Algobots.md#indicator-algobots-aka-i-bots), we encourage you to respect the proposed incumbencies architectecture and put the Technical Analysis logic in **indicator algobots**. Almost all Technical Analysis indicators are calculated from trades and volume data. Their formulas are in the pubic domain and even code is readily available if you search around. You are free to use open source code within your bot's code.
                                                </p>
                                            </li>
                                            <li>
                                                <p>
                                                    Once calculations are performed, the bot decides what to do, and uses the Assitant to place orders on the exchange.
                                                </p>
                                            </li>
                                        </ul>
                                        <p>
                                            These are the functions the Assistant offers:
                                        </p>
                                        <figure>
                                            <pre>
                                            <code class="language-javascript">
const MODULE_NAME = "Assistant";

let thisObject = {
dataDependencies: undefined,
initialize: initialize,
putPosition: putPosition,
movePosition: movePosition,
getPositions: getPositions,
getBalance: getBalance,
getAvailableBalance: getAvailableBalance,
getInvestment: getInvestment,
getProfits: getProfits,
getMarketRate: getMarketRate,
sendMessage: sendMessage
};
                                        </code>
  </pre>
                                        </figure>
                                    </div>
                                </div>
                            </div>


                            <div class="tab-pane fade" id="tab5">
                                <div class="row">
                                    <div class="col-sm-10 margin_top_small">

                                        <h2>Exchange API Key</h2>
                                        <p>
                                            The AAPlatform places orders on exchanges through the use of the exchanges' APIs. You will need to create an API Key and configure your bot to use it.
                                        </p>

                                        <h3>Creating the API Key</h3>

                                        <p>
                                            This is how you create an API Key in Poloniex:
                                        </p>
                                        <p>
                                            Go to the tools menu and select <i>API KEYS</i>...
                                        </p>

                                        <img src="img/documentation/Poloniex-API-01.png" width="100%">


                                        <p>
                                            If you have never used the API before, chances are it is disabled at the exchange. So before actually creating an API Key you will need to enable them...
                                        </p>

                                        <img src="img/documentation/Poloniex-API-02.png" width="100%">

                                        <p>
                                            You will need to follow the validation process involving checking your email and confirming your choice. Once that is taken care of, go back to the tools menu and click <i>API KEY</i> again. You should now see a screen offering to create a new key...
                                        </p>
                                        <img src="img/documentation/Poloniex-API-03.png" width="100%">

                                        <p>
                                            Once you create your key, the system will present it as follows...
                                        </p>
                                        <img src="img/documentation/Poloniex-API-04.png" width="100%">

                                        <p>
                                            <strong>Make sure you DO NOT enable withdrawals nor IP access restrictions.</strong>
                                        </p>

                                        <h3>Creating an API Key File</h3>

                                        <p>
                                            Next, you will use the information in the API Key to a create a <i>.json</i> file with the following structure using your own Key and Secret information:
                                        </p>
                                        <figure>
                                            <pre>
                                            <code class="language-markup">
{ "Key" : "6HS4YUEB-865UY9W4-KGHEHHJ-GH72ETG1", "Secret" : "1a3529851a05439asdasdw63426378ggd65701ac4a5d53c4859aa3511a8aa65acbd7e713bba755d0b1591ebe3a7618a71393ef4d3d11310628e1db"}
                                            </code>
                                            </pre>
                                        </figure>

                                        <p>
                                            Create a folder named <i>API-Keys</i> at the same level of the platform's repository (out of the folder AACloud) and save the file using the following naming convention:
                                        </p>
                                        <p>
                                            "<strong>AA</strong>" + <strong>BotName</strong> + "<strong>.</strong>" + <strong>ExchangeName</strong> + "<strong>.json</strong>"
                                        </p>
                                        <p>
                                            e.g.: AAMariam.Poloniex.json
                                        </p>
                                        <figure>
                                            <pre>
                                            <code class="language-markup">
.
├── AACloud                                 # You cloned this from git repository
    └── API-Keys                            # Create this dir at same level as AACloud
        └── AAYourAlgobot.Poloniex.json     # Place your Poloniex API Key file here
                                         </code>
                                            </pre>
                                        </figure>
                                        <p>
                                            <strong>NOTE: Make sure the folder and file doesn't accidentally end up in GitHub! Your API KEYs should be kept secret!</strong>
                                        </p>


                                    </div>
                                </div>
                            </div>


                            <div class="tab-pane fade" id="tab6">
                                <div class="row">
                                    <div class="col-sm-10 margin_top_small">

                                        <p><strong><a href="TheCompetition.md">&lt;&lt; Previous: About The Competition</a></strong></p>

                                        <h1 id="theaaplatform">The AAPlatform</h1>

                                        <h2 id="leadingprinciples">Leading Principles</h2>

                                        <p>We live in a world crammed with bots working behind the scenes whose intellectual property and profits are held close by their companies and developers. Advanced Algos and the surrounding community envision a <em>World of Tomorrow</em> brimming with the greater wealth cultivated by permissionless knowledge and accessible resources. Thus, it is our mission to create a self-sustaining open-source algobot development and access platform –making algobots accessible and easy-to-use for the everyday person.</p>

                                        <h2 id="relevantgithuborganizations">Relevant GitHub Organizations</h2>

                                        <p>There are three GitHub Organizations you need to be familiar with:</p>

                                        <ul>
                                            <li><p><a href="https://github.com/AdvancedAlgos">AdvancedAlgos</a>: Features repositories with the AAPlatform code including the bits that run in the cloud (AACloud) and in the web browser, along with a few other platform-related configurations and documentation.</p></li>

                                            <li><p><a href="https://github.com/AAMasters">AAMasters</a>: Its a showcase GitHub organization similar to the one each Algobot Team needs to create for themselves. It features several examples of bots, each in their corresponding repository.</p></li>

                                            <li><p><a href="https://github.com/AAArena">AAArena</a>: Its another showcase GitHub organization featuring the AA Application hosting the trading algobot competition you are about to enter.</p></li>
                                        </ul>

                                        <h2 id="aacloud">AACloud</h2>

                                        <p>AACloud is the part of the platform that interacts with algobots and puts them to run in the cloud.</p>

                                        <h3 id="runjs">Run.js</h3>

                                        <p>This is where everything starts:</p>

                                        <ul>
                                            <li><p>Run.js makes a number of global definitions (global variables,  constants and parameters),</p></li>

                                            <li><p>loads all relevant configuration files (starting from AACloud's <em>this.config.json</em> where each algobot process to be run is listed),</p></li>

                                            <li><p>and eventually calls the <em>Main Loop</em> module corresponding to the type of algobot it is running.</p></li>
                                        </ul>

                                        <h3 id="mainloopmodules">Main Loop Modules</h3>

                                        <p>The platform's architecture is designed so that algobots are run as self-contained entities, that is, when algobots finish their execution they are unloaded from memory and put to rest until the following scheduled execution starts.</p>

                                        <p>Each type of algobot (extractor, indicator and trading) has a specific workflow, thus each of them are handled from separate Main Loop modules. However, all Main Loop modules share a similar structure:</p>

                                        <ul>
                                            <li><p>They first set up a structure of nested objects to be passed on to algobots;</p></li>

                                            <li><p>objects are initialized, exposing a number of public functions that algobots can consume to perform their business operations;</p></li>

                                            <li><p>the corresponding algobots processes are executed and objects are passed on;</p></li>

                                            <li><p>once algobots finish their run, the Main Loop stores the <em>Context</em>;</p></li>

                                            <li><p>and finally, sets the time for the next execution.</p></li>
                                        </ul>

                                        <hr />

                                        <p><strong><a href="./Algobots.md">Next: About Algobots</a></strong></p>

                                        <p><a href="./Terms.md">Terms of Service</a>  &bull;  <a href="./Disclaimer.md">Disclaimer</a></p>

                                        <hr />

                                        <p><strong>Table of Contents:</strong> <a href="./README.md">Introduction</a> | <a href="./GettingStarted.md">Getting Started</a> | <a href="./TheCompetition.md">About The Competition</a> | <a href="./AAPlatform.md">The AAPlatform</a> | <a href="./Algobots.md">About Algobots</a> | <a href="./developing/0-Setup.md">Setting Up Your Development Environment</a> | <a href="./developing/1-TradingAlgobots.md">Trading Algobots</a> | <a href="./developing/1b-Exchange-API.md">Exchange API</a> | <a href="./developing/2-YourOwnAlgobot.md">Starting Out Your Own Algobot</a> | <a href="./developing/3-LaunchingYourAlgobot.md">Launching Your Algobot</a> | <a href="./Algobots-in-action.md">Watching Algobots in Action</a></p>

                                    </div>
                                </div>
                            </div>

                            <div class="tab-pane fade" id="tab6">
                                <div class="row">
                                    <div class="col-sm-10 margin_top_small">

                                        <h2>Watching Algobots in Action</h2>

                                        Now that you have a working version of your t-bot and have set it to perform some back testing or live trades, you can use the AAWeb app to visualize your algobot's actions on a candlestick chart. Being able to visually review your t-bot's trades is an essential part of the optimization process as it may help you fine-tune your t-bot's decision-making.

                                        The AAWeb app is available both in the [development](http://aawebdevelop.azurewebsites.net/) and [production](http://aawebproduction.azurewebsites.net/) environments.

                                        > **Known Issue**: At this point in time, AAWeb is being tested in Chrome only. While it should load on other browsers, some functions may not work as expected.

                                        <h3>AAWeb Overview</h3>

                                        AAWeb is an HTML canvas featuring three overlaid _visual spaces_ working simultaneously:

                                        * **Charts Timeline**: It is a timeline in which algobots' products are displayed in a graphical representation created by plotters.

                                        * **Floating Notifications**: It is a layer of information displayed on top the timeline, typically containing t-bots' related information such as t-bots' runtime position and messages.

                                        * **Control & Information Panels**: There are two types of panels. One set of panels is built in the AAWeb and show certain control elements to dictate what exactly is shown on the timeline (time control features and a list of algobots products, for instance). A second type of panels is created by plotters to display additional information for certain products.

                                        ![AAWeb Overview](https://github.com/AdvancedAlgos/Documentation/blob/master/Media/Dev-Teams-Getting-Sarted-Guide/AAWeb-01.png)

                                        **References**:

                                        _Charts Timeline_:

                                        1. This is the Charts Timeline. Notice the background watermark indicating this is the USDT-BTC market.

                                        2. The right margin features the Price Scale, in this case denominated in USDT.

                                        3. The left margin features a Percent Scale that is used in Algobots Competitions to indicate ROI.

                                        4. This is the candlestick chart visually showing Olivia's products, generated by [Plotters-Candles-Volumes](https://github.com/AAMasters/Plotters-Candles-Volumes).

                                        _Floating Notifications_:

                                        5. This is a message left by a t-bot, commenting on the nature of the operation being performed. The message is linked to a specific point in time.

                                        6. This is an icon indicating the last execution of a certain t-bot.

                                        _Control & Information Panels_:

                                        7. This is the Algobots Products Panel featuring products of algobots registered on the [AAPlatform ecosystem.json]( https://github.com/AdvancedAlgos/AAPlatform/blob/master/ecosystem.json) configuration file.

                                        8. This is the Time Control Panel, featuring controls for navigating the candles in either direction.

                                        9. This is the Current Candle Panel providing additional information about the candle filled in yellow in the candlestick chart. This panel is too generated by the [Plotters-Candles-Volumes](https://github.com/AAMasters/Plotters-Candles-Volumes) used by Olivia to help visualize her products.

                                        10. This is the Current Volume Panel, which works pretty much like the Current Candle Panel.

                                        <h3>Navigating Through the Charts Timeline</h3>

                                        With your mouse:

                                        * Zoom in and out by turning the wheel forwards and blackguards respectively. Notice how the time scale is automatically adjusted for different levels of zoom. The timescale is represented by the actual candles and the time value of each candle is indicated in the Time Control Panel.

                                        * Click and drag to pan across the timeline.

                                        <img align="right" src="https://github.com/AdvancedAlgos/Documentation/blob/master/Media/Dev-Teams-Getting-Sarted-Guide/AAWeb-small-time-control-panel.png">

                                        By default, the timeline is paused. The buttons in the Time Control Panel allow you to walk through the timeline in different ways:

                                        * The buttons immediately on either side of the pause button scroll the timeline horizontally in increments of one candlestick, either left or rightwards.

                                        * The play buttons play the timeline forwards or backwards continuously.

                                        <img align="right" src="https://github.com/AdvancedAlgos/Documentation/blob/master/Media/Dev-Teams-Getting-Sarted-Guide/AAWeb-small-algobots-products-panels-short.png">

                                        * The remaining buttons fast forwards and backwards respectively.

                                        * The text displayed above the control buttons indicate datetime and timescale of the current candle.

                                        <h3>Algobots Products Panel</h3>

                                        Use the Algobots Products Panel to turn ON and OFF layers –including candlesticks, volumes, indicators and studies– by clicking on the radio buttons on the right. A green light means the layer is showing in the charts. A yellow light means the layer is being calculated and made available to dependent layers. A red light means the layer is not calculated, thus not showing.

                                        To scroll the panel simply place your mouse pointer on top of it and turn the scroll wheel.

                                        <h3>T-Bots in Action</h3>

                                        <img align="right" src="https://github.com/AdvancedAlgos/Documentation/blob/master/Media/Dev-Teams-Getting-Sarted-Guide/AAWeb-small-sell-order.png">

                                        When either of the trading products is _on_ in the Algobots Products Panel, the [Plotters-Trading]( https://github.com/AAMasters/Plotters-Trading) associated with t-bots renders a number of visual clues in the timeline to indicate various t-bot actions. Notice the small triangles two candles after the current candle in solid yellow:

                                        * A triangle pointing downwards represents a _sell order_.

                                        * When the triangle is transparent with a red outline, it represents the moment in time and price point in which the order was placed.

                                        * When the triangle is solid red, it represents the moment in time and price point in which the order was filled.

                                        * Similarly, a triangle pointing upwards with a green outline means a _buy order_ was placed and the solid green triangle indicates that the order was filled.

                                        > Notice that outlined and solid triangles may overlap if the zoom level does not allow rendering each triangle in separate candles. In that case, it means that the order was placed and filled during the period of time represented by the candle.

                                        <h3>Action in a Competition Setting</h3>

                                        Competition related events are –too– rendered over the timeline. A thin red vertical line marks the start of the competition and a checkered vertical banner marks the end of the competition.

                                        ![ Action in a Competition Setting](https://github.com/AdvancedAlgos/Documentation/blob/master/Media/Dev-Teams-Getting-Sarted-Guide/AAWeb-02-competition.png)

                                        T-Bots keep showing their trades on the candlestick charts, as usual. In addition, a new area of the timeline gains relevance: the intersection of the red vertical line with the 0% horizontal mark of the ROI scale in the left margin. This is exactly where the competition starts.

                                        Trading algobots start out the competition at the 0% mark and their ROI is tracked with every single execution (every one minute) and rendered in the timeline accordingly.

                                        In other words, the competition can be followed in real time simply by watching the timeline.

                                        > **Note**: Bear in mind that the information plotted in the timeline is refreshed every one minute.


                                        <h4>
                                            Support

                                            [Join the Advanced Algos Telegram Channel](https://t.me/advancedalgos)

                                            <h4>
                                                Feedback

                                                We hope your participation is fun and educational and we'd love to make it better. Please submit any issues you experience during the competition in the [issues section](https://github.com/AAArena/First-Closed-Doors-Competition/issues) of this repository. Please also submit **any** suggestions or other feedback you might have to enhance future experiences via email to feedback at advancedalgos dot org.


                                    </div>
                                </div>
                            </div>

                            <div class="tab-pane fade" id="tab6">
                                <div class="row">
                                    <div class="col-sm-10 margin_top_small">

                                        <h2>Basic Definitions</h2>
                                        <h3>Infrastructure</h3>
                                    </div>
                                </div>
                            </div>

                            <div class="tab-pane fade" id="tab6">
                                <div class="row">
                                    <div class="col-sm-10 margin_top_small">

                                        <h2>Basic Definitions</h2>
                                        <h3>Infrastructure</h3>
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!--#include file="includes/footer.shtml" -->
    <!--#include file="includes/preloader.shtml" -->

</body>
</html>

